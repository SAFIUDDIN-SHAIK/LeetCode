class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        e = 1
        self.ans = 0

        for i in range(m):
            for j in range(n):
                if grid[i][j] == 0:
                    e += 1
                elif grid[i][j] == 1:
                    sx, sy = i, j
                elif grid[i][j] == 2:
                    ex, ey = i, j

        def dfs(x, y, e):
            if not (0 <= x < m and 0 <= y < n):
                return
            if grid[x][y] < 0:
                return
            if (x, y) == (ex, ey):
                if e == 0:
                    self.ans += 1
                return
            grid[x][y] = -2
            dfs(x + 1, y, e - 1)
            dfs(x - 1, y, e - 1)
            dfs(x, y + 1, e - 1)
            dfs(x, y - 1, e - 1)
            grid[x][y] = 0

        dfs(sx, sy, e)
        return self.ans
