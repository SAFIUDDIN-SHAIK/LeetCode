class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)

        def f(num):

            r = (num - 1) // n
            c = (num - 1) % n
            
            if r % 2 == 0:
                return n - 1 - r, c
            else:
                return n - 1 - r, n - 1 - c
            
            
        st = set()
        l = collections.deque()
        l.append((1, 0))

        while l:
            num, curr = l.popleft()
            r, c = f(num)

            if board[r][c] != -1:
                num = board[r][c]

            if num == n * n:
                return curr

            for x in range(1, 7):

                temp = num + x

                if temp <= n*n and temp not in st:
                    st.add(temp)
                    l.append((temp, curr+1))

        return -1
