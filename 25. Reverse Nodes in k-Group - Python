# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head or not head.next or k == 1:
            return head
        d = ListNode(-1, head)
        gp = d
        while True:
            kth = self.kthNode(gp, k)
            if not kth:
                break
            gn = kth.next
            prev = kth.next
            curr = gp.next
            while curr is not gn:
                temp = curr.next
                curr.next = prev
                prev = curr
                curr = temp
            temp = gp.next
            gp.next = kth
            gp = temp
        return d.next


    def kthNode(self, curr, k):
        while curr and k:
            curr = curr.next
            k -= 1
        return curr
